version: '3'

services:

  # Name of the service
  broker-service:
    # Path to the Dockerfile
    build: 
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    # Restart policy (always, unless-stopped, on-failure)
    restart: always
    # Port mapping (map port 8080 on our local machine to port 80 in the container)
    ports:
      - "8080:80"
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1

  # Name of the service
  logger-service:
    # Path to the Dockerfile
    build: 
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    # Restart policy (always, unless-stopped, on-failure)
    restart: always
    # Port mapping (map port 8082 on our local machine to port 80 in the container) because we use the port of the docker not local machine port
    ports:
      - "8082:80"
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1

  # Name of the service
  authentication-service:
    # Path to the Dockerfile
    build: 
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    # Restart policy (always, unless-stopped, on-failure)
    restart: always
    # Port mapping (map port 8081 on our local machine to port 80 in the container)
    ports:
      - "8081:80"
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1
    # Environment variables
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=GMT+1 connect_timeout=5"


  # Name of the service
  postgres:
    # Image to use
    image: 'postgres:14.2'
    # Port mapping (map port 5432 on our local machine to port 5432 in the container)
    ports:
      - "5432:5432"
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1
    # Environment variables
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    # Volumes (map the /var/lib/postgresql/data/ directory in the container to the ./db-data/postgres/ directory on our local machine)
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/


  # Name of the service
  mongo:
    # Image to use
    image: 'mongo:4.2.16-bionic'
    # Port mapping (map port 27017 on our local machine to port 27017 in the container)
    ports:
      - "27017:27017"
    # Environment variables
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1
    # Volumes (map the /data/db/ directory in the container to the ./db-data/mongo/ directory on our local machine)
    volumes:
      - ./db-data/mongo/:/data/db/

    # Name of the service
  mailer-service:
    # Path to the Dockerfile
    build: 
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    # Restart policy (always, unless-stopped, on-failure)
    restart: always
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1
    # Environment variables
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "Ajiboye Adedotun"
      MAIL_ENCRYPTION: none

  # Name of the service
  mailhog:
    # Image to use
    image: 'mailhog/mailhog:latest'
    # Port mapping (map port 1025 on our local machine to port 1025 in the container)
    ports:
      - "1025:1025"
      - "8025:8025"

  # Name of the service
  rabbitmq:
    # Image to use
    image: 'rabbitmq:3.9-alpine'
    # Port mapping (map port 5672 on our local machine to port 5672 in the container)
    ports:
      - "5672:5672"
    # Deploy only one instance of the service
    deploy:
      mode: replicated
      replicas: 1
    # Environment variables
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: password
    # Volumes (map the /var/lib/rabbitmq/ directory in the container to the ./db-data/rabbitmq/ directory on our local machine)
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

